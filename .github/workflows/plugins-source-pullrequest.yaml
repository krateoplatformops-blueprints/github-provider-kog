name: plugins-source-pullrequest

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-source-code:
    name: Test Source Code
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./plugins
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: "plugins/go.work.sum"

      - name: Run Go Tests
        run: go test -v -cover $(go work edit -json | jq -r '.Use[].DiskPath' | sed 's|$|/...|' | tr '\n' ' ')

  determine-changes-in-source-code:
    name: Determine Changes in Source Code
    runs-on: ubuntu-latest
    
    outputs:
      matrix: ${{ steps.determine-matrix.outputs.matrix }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v47
        with:
          files: plugins/**

      - name: Determine which plugins to build
        id: determine-matrix
        run: |
          ALL_PLUGINS=$(ls -d plugins/cmd/*-plugin | xargs -n 1 basename)
          PLUGINS_TO_BUILD="[]"
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"

          # Find changes in shared files (in plugins/ but not in plugins/cmd/)
          SHARED_CHANGES=$(echo "$CHANGED_FILES" | grep '^plugins/' | grep -v '^plugins/cmd/')

          if [ -n "$SHARED_CHANGES" ]; then
            echo "Shared file changes detected, building all plugins."
            echo "Triggering file: $(echo "$SHARED_CHANGES" | head -n1)"
            PLUGINS_TO_BUILD=$(echo "$ALL_PLUGINS" | jq -R . | jq -s -c .)
          else
            echo "No shared file changes. Checking for individual plugin changes."
            for plugin in $ALL_PLUGINS; do
              if echo "$CHANGED_FILES" | grep -q "plugins/cmd/$plugin/"; then
                PLUGINS_TO_BUILD=$(echo "$PLUGINS_TO_BUILD" | jq -c --arg p "$plugin" '. + [$p]')
                echo "Added $plugin to build list."
              fi
            done
          fi

          echo "Plugins to build: $PLUGINS_TO_BUILD"
          echo "matrix={\"plugin\":${PLUGINS_TO_BUILD}}" >> $GITHUB_OUTPUT

  build-images-and-not-push:
    name: Build Images and NOT Push
    # Only run if there are plugins to build (changes detected)
    if: needs.determine-changes-in-source-code.outputs.matrix != '{"plugin":[]}' 
    needs: [test-source-code, determine-changes-in-source-code]
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.determine-changes-in-source-code.outputs.matrix) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Images
        uses: docker/build-push-action@v5
        with:
          context: ./plugins
          file: ./plugins/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          build-args: |
            PLUGIN_NAME=${{ matrix.plugin }}
