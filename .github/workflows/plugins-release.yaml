# .github/workflows/plugins-release.yaml
name: Plugins Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  # Job 1: Identify which plugins have changed.
  list-changed-plugins:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changed-plugins.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to compare commits

      - name: Get changed plugin directories
        id: changed-plugins
        run: |
          PLUGINS=$( 
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} |
            grep -E '^plugins/cmd/[^/]+/' |
            sed -E 's|plugins/cmd/([^/]+)/.*|\1|' |
            sort -u |
            jq -R -s -c 'split("\n") | map(select(length > 0))'
          )
          echo "matrix={\"plugin\":${PLUGINS}}" >> $GITHUB_OUTPUT

  # Job 2: Build and publish container images for changed plugins.
  build-and-publish-images:
    needs: list-changed-plugins
    if: needs.list-changed-plugins.outputs.matrix != '{"plugin":[]}'
    strategy:
      matrix: ${{ fromJson(needs.list-changed-plugins.outputs.matrix) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/github-provider-kog/${{ matrix.plugin }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./plugins
          file: ./plugins/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PLUGIN_NAME=${{ matrix.plugin }}

  # Job 3: Release the individual Helm charts for the changed plugins.
  release-plugin-charts:
    needs: build-and-publish-images
    strategy:
      matrix: ${{ fromJson(needs.list-changed-plugins.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate with GitHub App
        id: authenticate
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - name: Set up Helm
        uses: azure/setup-helm@v4.1.0
      - name: Update and Publish Chart
        run: |
          CHART_DIR="./${{ matrix.plugin }}-chart"
          NEW_VERSION="${{ github.ref_name }}"
          echo "Updating ${CHART_DIR} to version ${NEW_VERSION}"
          # Update Chart.yaml (version and appVersion)
          yq e ".version = \"${NEW_VERSION#v}\" | .appVersion = \"${NEW_VERSION#v}\"" -i "${CHART_DIR}/Chart.yaml"
          # Update values.yaml (image.tag)
          yq e ".image.tag = \"${NEW_VERSION#v}\"" -i "${CHART_DIR}/values.yaml"
          # Publish
          helm package "${CHART_DIR}"
          helm push "${{ matrix.plugin }}-${NEW_VERSION#v}.tgz" oci://ghcr.io/krateoplatformops/charts
        env:
          HELM_EXPERIMENTAL_OCI: 1
          CR_TOKEN: ${{ steps.authenticate.outputs.token }}

  # Job 4: Release the final umbrella Helm chart.
  release-umbrella-chart:
    needs: release-plugin-charts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate with GitHub App
        id: authenticate
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - name: Set up Helm
        uses: azure/setup-helm@v4.1.0
      - name: Update and Publish Umbrella Chart
        run: |
          CHART_DIR="./github-provider-kog-plugins-chart"
          NEW_VERSION="${{ github.ref_name }}"
          echo "Updating Umbrella Chart to version ${NEW_VERSION}"
          # Update the umbrella chart's own version
          yq e ".version = \"${NEW_VERSION#v}\"" -i "${CHART_DIR}/Chart.yaml"
          # Update the version of each changed subchart dependency
          for plugin in ${{ join(fromJson(needs.list-changed-plugins.outputs.matrix).plugin, ' ') }};
          do
            echo "Updating dependency version for ${plugin} in umbrella chart"
            yq e "(.dependencies[] | select(.name == \"${plugin}\")).version = \"${NEW_VERSION#v}\"" -i "${CHART_DIR}/Chart.yaml"
          done
          # Publish
          helm package "${CHART_DIR}"
          helm push "github-provider-kog-plugins-${NEW_VERSION#v}.tgz" oci://ghcr.io/krateoplatformops/charts
        env:
          HELM_EXPERIMENTAL_OCI: 1
          CR_TOKEN: ${{ steps.authenticate.outputs.token }}